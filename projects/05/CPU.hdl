// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    /* decode instruction [ixxa cccc ccdd djjj] */

    /*** ARegister ***/
    /* if A instr then use a else use b */
    Mux16(a[0..14]=instruction[0..14], a[15]=false,
          b=aluout, sel=instruction[15], out=ain);
    /* load to ARegister when A instr or ( C instr & destination is A ) */
    Not(in=instruction[15], out=isAInstr);
    And(a=instruction[15], b=instruction[5], out=isCInstrAndDestIsAReg);
    Or(a=isAInstr, b=isCInstrAndDestIsAReg, out=aload);
    /* addressM is in ARegister */
    ARegister(in=ain, load=aload, out=aout, out[0..14]=addressM);

    /*** DRegister ***/
    /* load to DRegister when C instr & destination is D */
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=dout);

    /*** ALU ***/
    /* x is always DRegister
     * y is ARegister when a bit is 0
     *      inM       when a bit is 1 */
    Mux16(a=aout, b=inM, sel=instruction[12], out=y);
    /* pass cccccc bits to zx ~ no */
    ALU(x=dout, y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout, out=outM, zr=aluOutIsZero, ng=aluOutIsNegative);

    /* write to M when C instr & destination is M */
    And(a=instruction[15], b=instruction[3], out=writeM);

    /* jjj = j1 j2 j3 = out<0 out=0 out>0 */
    And(a=instruction[2], b=aluOutIsNegative, out=j1);
    And(a=instruction[1], b=aluOutIsZero, out=j2);
    Or(a=aluOutIsNegative, b=aluOutIsZero, out=aluOutLEZero);
    Not(in=aluOutLEZero, out=aluOutIsPositive);
    And(a=instruction[0], b=aluOutIsPositive, out=j3);
    Or(a=j1, b=j2, out=j1j2);
    Or(a=j1j2, b=j3, out=j1j2j3);
    /* should jump when C instr */
    And(a=instruction[15], b=j1j2j3, out=shouldJump);

    /*** PC ***/
    PC(in=aout, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}
